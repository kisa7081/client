{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/conversion-list/conversion-list.component.html","webpack:///./src/app/conversion-list/conversion-list.component.ts","webpack:///./src/app/conversion.service.ts","webpack:///./src/app/conversion/conversion.component.html","webpack:///./src/app/conversion/conversion.component.ts","webpack:///./src/app/create-conversion/create-conversion.component.html","webpack:///./src/app/create-conversion/create-conversion.component.ts","webpack:///./src/app/timestamp/timestamp.component.html","webpack:///./src/app/timestamp/timestamp.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<router-outlet></router-outlet>\\n\"","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n    title = 'Currency Converter';\n\n    constructor() {\n    }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {AppComponent} from './app.component';\nimport {ConversionComponent} from './conversion/conversion.component';\nimport {ConversionListComponent} from './conversion-list/conversion-list.component';\nimport {TimestampComponent} from './timestamp/timestamp.component';\nimport { CreateConversionComponent } from './create-conversion/create-conversion.component';\n\nconst routes: Routes = [\n    {path: '', redirectTo: '/', pathMatch: 'full'},\n    {path: '', component: ConversionComponent},\n    {path: 'create', component: CreateConversionComponent}\n];\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ConversionComponent,\n        ConversionListComponent,\n        TimestampComponent,\n        CreateConversionComponent\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        FormsModule,\n        RouterModule.forRoot(\n            routes\n        )\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"row alert-info border border-dark font-weight-bold\\\">\\n        <div class=\\\"col\\\">\\n            Source Amount\\n        </div>\\n        <div class=\\\"col\\\">\\n            Source Currency\\n        </div>\\n        <div class=\\\"col\\\">\\n            Target Currency\\n        </div>\\n        <div class=\\\"col\\\">\\n            Rate\\n        </div>\\n        <div class=\\\"col\\\">\\n            Converted Amount\\n        </div>\\n        <div class=\\\"col\\\">\\n            Time\\n        </div>\\n        <div class=\\\"col\\\">\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\" >\\n        <div class=\\\"col\\\">\\n            {{ conversion.sourceAmount }}\\n        </div>\\n        <div class=\\\"col\\\">\\n            {{ conversion.sourceCurrency }}\\n        </div>\\n        <div class=\\\"col\\\">\\n            {{ conversion.targetCurrency }}\\n        </div>\\n        <div class=\\\"col\\\">\\n            <form #form=\\\"ngForm\\\" (ngSubmit)=\\\"updateConversion(form.value)\\\">\\n                <input type=\\\"number\\\" required placeholder=\\\"Rate\\\" #rate=\\\"ngModel\\\" name=\\\"rate\\\" class=\\\"form-control m-2\\\" [(ngModel)]=\\\"conversion.rate\\\">\\n                <button [disabled]=\\\"!form.valid\\\" type='submit' class=\\\"btn btn-success m-2\\\">Update</button>\\n                <div *ngIf=\\\"form.invalid && (form.dirty || form.touched)\\\" class=\\\"alert alert-danger\\\">\\n                    Rate is required and must be numeric.\\n                </div>\\n            </form>\\n        </div>\\n        <div class=\\\"col\\\">\\n            {{ conversion.convertedAmount }}\\n        </div>\\n        <div class=\\\"col\\\">\\n            {{ conversion.timeStamp }}\\n        </div>\\n        <div class=\\\"col\\\">\\n            <button type='button' class=\\\"btn btn-dark m-2 form-control\\\" (click)=\\\"deleteConversion()\\\">Delete</button>\\n        </div>\\n    </div>\\n</div>\\n\"","import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport {ConversionService} from '../conversion.service';\n\n@Component({\n    selector: 'app-conversion-list',\n    templateUrl: './conversion-list.component.html',\n    providers: [ConversionService]\n})\nexport class ConversionListComponent implements OnInit {\n\n    @Input() conversion;\n    @Output() refreshListEvent = new EventEmitter();\n\n    constructor(private conversionService: ConversionService) {\n    }\n\n    ngOnInit() {\n    }\n\n    updateConversion(obj: any): void {\n        this.conversion.rate = obj.rate;\n        this.conversionService.updateConversion(this.conversion).subscribe((result) => {\n            this.conversion = result;\n        });\n    }\n\n    deleteConversion(): void {\n        this.conversionService.deleteConversion(this.conversion._id).subscribe(() => {\n            this.refreshListEvent.emit();\n        });\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../environments/environment';\n\n@Injectable()\nexport class ConversionService {\n\n  private apiurl = environment.apiurl;\n\n  constructor(private http: HttpClient) {\n  }\n\n  listConversions() {\n    return this.http.get(this.apiurl + 'api/conv');\n  }\n\n  updateConversion(obj : any) {\n    console.log(obj);\n    return this.http.put(this.apiurl + 'api/conv/' + obj._id, obj);\n  }\n\n  deleteConversion(id) {\n    return this.http.delete(this.apiurl + 'api/conv/' + id);\n  }\n\n  getTimestamp() {\n    return this.http.get(this.apiurl + 'api/conv/timestamp');\n  }\n\n  deleteAll() {\n      return this.http.delete(this.apiurl + 'api/conv/deleteAll');\n  }\n\n  refreshRates() {\n      return this.http.get(this.apiurl + 'api/conv/refreshRates');\n  }\n\n  getCurrencies() {\n      return this.http.get(this.apiurl + 'api/conv/currencies');\n  }\n\n  createConversion(cur: any) {\n      return this.http.post(this.apiurl + 'api/conv/', cur);\n  }\n\n}\n","module.exports = \"<app-timestamp></app-timestamp>\\n<app-conversion-list *ngFor='let c of conversionList'\\n                     [conversion]=\\\"c\\\"\\n                     (refreshListEvent)=\\\"handleListRefresh()\\\"\\n>\\n</app-conversion-list>\\n<footer class=\\\"alert-warning border-top border-dark\\\">\\n    <a href=\\\"/create\\\" class=\\\"btn btn-primary m-2\\\">Create a Conversion</a>\\n    <button type='button' class=\\\"btn btn-danger m-2\\\" (click)=\\\"deleteAll()\\\">Clear Conversion List</button>\\n</footer>\\n\"","import {Component, OnInit, Output, EventEmitter} from '@angular/core';\nimport {ConversionService} from '../conversion.service';\n\n@Component({\n    selector: 'app-conversion',\n    templateUrl: './conversion.component.html',\n    providers: [ConversionService]\n})\nexport class ConversionComponent implements OnInit {\n\n    conversionList = null;\n    ratesTimestamp = null;\n    @Output() refreshTimestampEvent = new EventEmitter();\n\n    constructor(private conversionService: ConversionService) {\n    }\n\n    ngOnInit() {\n        this.handleListRefresh();\n    }\n\n    handleListRefresh() {\n        this.conversionService.listConversions().subscribe((convs) => {\n            this.conversionList = convs;\n            this.conversionService.getTimestamp().subscribe((ts) => {\n                this.ratesTimestamp = ts;\n            });\n        });\n    }\n\n    deleteAll() {\n        this.conversionService.deleteAll().subscribe(() => {\n            this.handleListRefresh();\n        });\n    }\n}\n","module.exports = \"<app-timestamp></app-timestamp>\\n<form #newConvForm=\\\"ngForm\\\" (ngSubmit)=\\\"createConversion(newConvForm)\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col text-right\\\">\\n                Enter currency amount*:\\n            </div>\\n            <div class=\\\"col text-left\\\">\\n                <input type=\\\"number\\\" required #sourceAmount=\\\"ngModel\\\" placeholder=\\\"Amount\\\" name=\\\"sourceAmount\\\" class=\\\"form-control\\\"\\n                       [(ngModel)]=\\\"conversion.sourceAmount\\\">\\n            </div>\\n        </div>\\n        <br>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col text-right\\\">\\n                Choose currency*:\\n            </div>\\n            <div class=\\\"col text-left\\\">\\n                <select required #sourceAmount=\\\"ngModel\\\" name=\\\"sourceCurrency\\\" class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"conversion.sourceCurrency\\\">\\n                    <option *ngFor=\\\"let c of currencies\\\" [value]=\\\"c.value\\\">\\n                        {{c.viewValue}}\\n                    </option>\\n                </select>\\n            </div>\\n        </div>\\n        <br>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col text-right\\\">\\n                Choose currency to convert to*:\\n            </div>\\n            <div class=\\\"col text-left\\\">\\n                <select required #targetCurrency=\\\"ngModel\\\" name=\\\"targetCurrency\\\" class=\\\"form-control\\\"\\n                        [(ngModel)]=\\\"conversion.targetCurrency\\\">\\n                    <option *ngFor=\\\"let c of currencies; let i = index\\\" [value]=\\\"i\\\">\\n                        {{c.viewValue}}\\n                    </option>\\n                </select>\\n            </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col text-right\\\">\\n                * Required\\n            </div>\\n            <div class=\\\"col text-left\\\">\\n            </div>\\n        </div>\\n        <br>\\n    </div>\\n    <div class=\\\"alert-warning border-top border-dark\\\">\\n        <button type='submit' value='Convert' class=\\\"btn btn-info  m-2\\\" [disabled]=\\\"!newConvForm.valid\\\">Convert</button>\\n        <a href=\\\"/\\\" class=\\\"btn btn-primary m-2\\\">Cancel</a>\\n    </div>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ConversionService} from '../conversion.service';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-create-conversion',\n    templateUrl: './create-conversion.component.html',\n    providers: [ConversionService]\n})\nexport class CreateConversionComponent implements OnInit {\n\n    constructor(private conversionService: ConversionService, private router: Router) {\n    }\n\n    currencies = null;\n    conversion: any = {};\n\n    ngOnInit() {\n        this.conversionService.getCurrencies().subscribe((cur) => {\n            this.currencies = this.createArrayFromObject(cur);\n        });\n    }\n\n    createConversion(cur: any): void {\n        this.conversionService.createConversion(cur.value).subscribe(() => {\n            this.router.navigate(['/conv']);\n        });\n    }\n\n    private createArrayFromObject(currObj) {\n        const keys = Object.keys(currObj);\n        const arr = [];\n        console.log(currObj);\n        for (const curr of keys) {\n            const a = {value : curr, viewValue : currObj[curr]};\n            console.log(curr);\n            arr.push(a);\n        }\n        return arr;\n    }\n}\n","module.exports = \"<section>\\n    <header>\\n        <h1 id='title' class=\\\"alert-danger border-bottom border-dark\\\">\\n            Currency Converter\\n        </h1>\\n        <p id='info' class=\\\"alert-success  border-top border-bottom border-dark\\\">\\n            Currency conversion rates are current as of:\\n            <br>\\n            {{ ratesTimestamp }}\\n            <br>\\n            <button type='button' class=\\\"btn btn-info m-2\\\" (click)=\\\"refreshTimestamp()\\\">Refresh rates</button>\\n        </p>\\n    </header>\\n</section>\\n<hr>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {ConversionService} from '../conversion.service';\n\n@Component({\n    selector: 'app-timestamp',\n    templateUrl: './timestamp.component.html',\n    providers: [ConversionService]\n})\nexport class TimestampComponent implements OnInit {\n\n    ratesTimestamp = null;\n\n    constructor(private conversionService: ConversionService) {\n    }\n\n    ngOnInit() {\n        this.getTimestamp();\n    }\n\n    refreshTimestamp(): void {\n        this.conversionService.refreshRates().subscribe(() => {\n            this.conversionService.getTimestamp().subscribe((ts) => {\n                this.ratesTimestamp = ts;\n            });\n        });\n    }\n\n    getTimestamp() {\n        this.conversionService.getTimestamp().subscribe((ts) => {\n            this.ratesTimestamp = ts;\n        });\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiurl : '/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}